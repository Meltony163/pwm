
Pwm2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002634  08002634  00003634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002658  08002658  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002658  08002658  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002658  08002658  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002658  08002658  00003658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800265c  0800265c  0000365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002660  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  0800266c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800266c  00004168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000838b  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188f  00000000  00000000  0000c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0000dc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000773  00000000  00000000  0000e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169bb  00000000  00000000  0000ed73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa9e  00000000  00000000  0002572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084419  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b45e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  000b4628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b6d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800261c 	.word	0x0800261c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800261c 	.word	0x0800261c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fc60 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f818 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f7ff ffca 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 80001b8:	f000 f972 	bl	80004a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001bc:	f000 fa1c 	bl	80005f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001c0:	f000 fa6e 	bl	80006a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80001c4:	f000 fac0 	bl	8000748 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 80001c8:	213c      	movs	r1, #60	@ 0x3c
 80001ca:	4804      	ldr	r0, [pc, #16]	@ (80001dc <main+0x34>)
 80001cc:	f001 fc62 	bl	8001a94 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 80001d0:	213c      	movs	r1, #60	@ 0x3c
 80001d2:	4803      	ldr	r0, [pc, #12]	@ (80001e0 <main+0x38>)
 80001d4:	f001 fc5e 	bl	8001a94 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	bf00      	nop
 80001da:	e7fd      	b.n	80001d8 <main+0x30>
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	200000d4 	.word	0x200000d4

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	@ 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	@ 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 f9e5 	bl	80025c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000206:	2301      	movs	r3, #1
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800020a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800020e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000218:	2302      	movs	r3, #2
 800021a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000220:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000222:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	4618      	mov	r0, r3
 800022e:	f000 ff13 	bl	8001058 <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000238:	f000 f819 	bl	800026e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000240:	2302      	movs	r3, #2
 8000242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2102      	movs	r1, #2
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f980 	bl	800155c <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000262:	f000 f804 	bl	800026e <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	@ 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000272:	b672      	cpsid	i
}
 8000274:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000276:	bf00      	nop
 8000278:	e7fd      	b.n	8000276 <Error_Handler+0x8>
	...

0800027c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000282:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <HAL_MspInit+0x5c>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a14      	ldr	r2, [pc, #80]	@ (80002d8 <HAL_MspInit+0x5c>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <HAL_MspInit+0x5c>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029a:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <HAL_MspInit+0x5c>)
 800029c:	69db      	ldr	r3, [r3, #28]
 800029e:	4a0e      	ldr	r2, [pc, #56]	@ (80002d8 <HAL_MspInit+0x5c>)
 80002a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002a4:	61d3      	str	r3, [r2, #28]
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <HAL_MspInit+0x5c>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <HAL_MspInit+0x60>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <HAL_MspInit+0x60>)
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ce:	bf00      	nop
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010000 	.word	0x40010000

080002e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <NMI_Handler+0x4>

080002e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <HardFault_Handler+0x4>

080002f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <MemManage_Handler+0x4>

080002f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <UsageFault_Handler+0x4>

08000308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static u16 Local_su16Ticks=0;
	Local_su16Ticks++;
 8000332:	4b1d      	ldr	r3, [pc, #116]	@ (80003a8 <SysTick_Handler+0x7c>)
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b1b      	ldr	r3, [pc, #108]	@ (80003a8 <SysTick_Handler+0x7c>)
 800033c:	801a      	strh	r2, [r3, #0]
	if(Local_su16Ticks==500)
 800033e:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <SysTick_Handler+0x7c>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000346:	d128      	bne.n	800039a <SysTick_Handler+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
	{
        __disable_irq();  // Ensure atomic access to shared variables
        s32 __vo current_position1 = Glob_s32Encoder1TotalCount + __HAL_TIM_GET_COUNTER(&htim2);
 800034c:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <SysTick_Handler+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000352:	4a17      	ldr	r2, [pc, #92]	@ (80003b0 <SysTick_Handler+0x84>)
 8000354:	6812      	ldr	r2, [r2, #0]
 8000356:	4413      	add	r3, r2
 8000358:	607b      	str	r3, [r7, #4]
        s32 __vo current_position2 = Glob_s32Encoder2TotalCount + __HAL_TIM_GET_COUNTER(&htim3);
 800035a:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <SysTick_Handler+0x88>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000360:	4a15      	ldr	r2, [pc, #84]	@ (80003b8 <SysTick_Handler+0x8c>)
 8000362:	6812      	ldr	r2, [r2, #0]
 8000364:	4413      	add	r3, r2
 8000366:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000368:	b662      	cpsie	i
}
 800036a:	bf00      	nop
        __enable_irq();

        // Calculate speed in pulses per second (PPS)
        Glob_s32Motor1Speed = (current_position1 - Glob_s32Encoder1LastPos) * 2;
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	4b13      	ldr	r3, [pc, #76]	@ (80003bc <SysTick_Handler+0x90>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <SysTick_Handler+0x94>)
 8000378:	6013      	str	r3, [r2, #0]
        Glob_s32Motor2Speed = (current_position2 - Glob_s32Encoder2LastPos) * 2;
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <SysTick_Handler+0x98>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <SysTick_Handler+0x9c>)
 8000386:	6013      	str	r3, [r2, #0]

        // Update last positions
        Glob_s32Encoder1LastPos = current_position1;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a0c      	ldr	r2, [pc, #48]	@ (80003bc <SysTick_Handler+0x90>)
 800038c:	6013      	str	r3, [r2, #0]
        Glob_s32Encoder2LastPos = current_position2;
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	4a0c      	ldr	r2, [pc, #48]	@ (80003c4 <SysTick_Handler+0x98>)
 8000392:	6013      	str	r3, [r2, #0]

        // Reset tick counter
        Local_su16Ticks = 0;
 8000394:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <SysTick_Handler+0x7c>)
 8000396:	2200      	movs	r2, #0
 8000398:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 fbaf 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000040 	.word	0x20000040
 80003ac:	2000008c 	.word	0x2000008c
 80003b0:	20000028 	.word	0x20000028
 80003b4:	200000d4 	.word	0x200000d4
 80003b8:	2000002c 	.word	0x2000002c
 80003bc:	20000038 	.word	0x20000038
 80003c0:	20000030 	.word	0x20000030
 80003c4:	2000003c 	.word	0x2000003c
 80003c8:	20000034 	.word	0x20000034

080003cc <TIM2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void) {
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 80003d0:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <TIM2_IRQHandler+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d11f      	bne.n	800041e <TIM2_IRQHandler+0x52>
        if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <TIM2_IRQHandler+0x5c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d118      	bne.n	800041e <TIM2_IRQHandler+0x52>
            __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <TIM2_IRQHandler+0x5c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f06f 0201 	mvn.w	r2, #1
 80003f4:	611a      	str	r2, [r3, #16]

            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <TIM2_IRQHandler+0x5c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	2b10      	cmp	r3, #16
 8000402:	d106      	bne.n	8000412 <TIM2_IRQHandler+0x46>
            	Glob_s32Encoder1TotalCount -= 0x10000;  // Underflow: Decrement by 65536
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <TIM2_IRQHandler+0x60>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800040c:	4a07      	ldr	r2, [pc, #28]	@ (800042c <TIM2_IRQHandler+0x60>)
 800040e:	6013      	str	r3, [r2, #0]
            } else {
            	Glob_s32Encoder1TotalCount += 0x10000;  // Overflow: Increment by 65536
            }
        }
    }
}
 8000410:	e005      	b.n	800041e <TIM2_IRQHandler+0x52>
            	Glob_s32Encoder1TotalCount += 0x10000;  // Overflow: Increment by 65536
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <TIM2_IRQHandler+0x60>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800041a:	4a04      	ldr	r2, [pc, #16]	@ (800042c <TIM2_IRQHandler+0x60>)
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	2000008c 	.word	0x2000008c
 800042c:	20000028 	.word	0x20000028

08000430 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void) {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET) {
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <TIM3_IRQHandler+0x5c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	691b      	ldr	r3, [r3, #16]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	2b01      	cmp	r3, #1
 8000440:	d11f      	bne.n	8000482 <TIM3_IRQHandler+0x52>
        if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_UPDATE) != RESET) {
 8000442:	4b12      	ldr	r3, [pc, #72]	@ (800048c <TIM3_IRQHandler+0x5c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b01      	cmp	r3, #1
 800044e:	d118      	bne.n	8000482 <TIM3_IRQHandler+0x52>
            __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000450:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <TIM3_IRQHandler+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f06f 0201 	mvn.w	r2, #1
 8000458:	611a      	str	r2, [r3, #16]

            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 800045a:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <TIM3_IRQHandler+0x5c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f003 0310 	and.w	r3, r3, #16
 8000464:	2b10      	cmp	r3, #16
 8000466:	d106      	bne.n	8000476 <TIM3_IRQHandler+0x46>
            	Glob_s32Encoder2TotalCount -= 0x10000;  // Underflow: Decrement by 65536
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <TIM3_IRQHandler+0x60>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8000470:	4a07      	ldr	r2, [pc, #28]	@ (8000490 <TIM3_IRQHandler+0x60>)
 8000472:	6013      	str	r3, [r2, #0]
            } else {
            	Glob_s32Encoder2TotalCount += 0x10000;  // Overflow: Increment by 65536
            }
        }
    }
}
 8000474:	e005      	b.n	8000482 <TIM3_IRQHandler+0x52>
            	Glob_s32Encoder2TotalCount += 0x10000;  // Overflow: Increment by 65536
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <TIM3_IRQHandler+0x60>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800047e:	4a04      	ldr	r2, [pc, #16]	@ (8000490 <TIM3_IRQHandler+0x60>)
 8000480:	6013      	str	r3, [r2, #0]
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	200000d4 	.word	0x200000d4
 8000490:	2000002c 	.word	0x2000002c

08000494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b096      	sub	sp, #88	@ 0x58
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2220      	movs	r2, #32
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 f872 	bl	80025c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004de:	4b44      	ldr	r3, [pc, #272]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80004e0:	4a44      	ldr	r2, [pc, #272]	@ (80005f4 <MX_TIM1_Init+0x154>)
 80004e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e4:	4b42      	ldr	r3, [pc, #264]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b41      	ldr	r3, [pc, #260]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5142;
 80004f0:	4b3f      	ldr	r3, [pc, #252]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80004f2:	f241 4216 	movw	r2, #5142	@ 0x1416
 80004f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b3d      	ldr	r3, [pc, #244]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fe:	4b3c      	ldr	r3, [pc, #240]	@ (80005f0 <MX_TIM1_Init+0x150>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b3a      	ldr	r3, [pc, #232]	@ (80005f0 <MX_TIM1_Init+0x150>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050a:	4839      	ldr	r0, [pc, #228]	@ (80005f0 <MX_TIM1_Init+0x150>)
 800050c:	f001 f982 	bl	8001814 <HAL_TIM_Base_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000516:	f7ff feaa 	bl	800026e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800051e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000520:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000524:	4619      	mov	r1, r3
 8000526:	4832      	ldr	r0, [pc, #200]	@ (80005f0 <MX_TIM1_Init+0x150>)
 8000528:	f001 fc24 	bl	8001d74 <HAL_TIM_ConfigClockSource>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000532:	f7ff fe9c 	bl	800026e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000536:	482e      	ldr	r0, [pc, #184]	@ (80005f0 <MX_TIM1_Init+0x150>)
 8000538:	f001 f9bb 	bl	80018b2 <HAL_TIM_PWM_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000542:	f7ff fe94 	bl	800026e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000546:	2300      	movs	r3, #0
 8000548:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800054e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000552:	4619      	mov	r1, r3
 8000554:	4826      	ldr	r0, [pc, #152]	@ (80005f0 <MX_TIM1_Init+0x150>)
 8000556:	f001 ff85 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000560:	f7ff fe85 	bl	800026e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000564:	2360      	movs	r3, #96	@ 0x60
 8000566:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056c:	2300      	movs	r3, #0
 800056e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000578:	2300      	movs	r3, #0
 800057a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000584:	2200      	movs	r2, #0
 8000586:	4619      	mov	r1, r3
 8000588:	4819      	ldr	r0, [pc, #100]	@ (80005f0 <MX_TIM1_Init+0x150>)
 800058a:	f001 fb31 	bl	8001bf0 <HAL_TIM_PWM_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000594:	f7ff fe6b 	bl	800026e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059c:	2204      	movs	r2, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4813      	ldr	r0, [pc, #76]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80005a2:	f001 fb25 	bl	8001bf0 <HAL_TIM_PWM_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80005ac:	f7ff fe5f 	bl	800026e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80005d4:	f001 ffa4 	bl	8002520 <HAL_TIMEx_ConfigBreakDeadTime>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80005de:	f7ff fe46 	bl	800026e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005e2:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <MX_TIM1_Init+0x150>)
 80005e4:	f000 f9c8 	bl	8000978 <HAL_TIM_MspPostInit>

}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	@ 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000044 	.word	0x20000044
 80005f4:	40012c00 	.word	0x40012c00

080005f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	@ 0x30
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2224      	movs	r2, #36	@ 0x24
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ffdb 	bl	80025c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000614:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_TIM2_Init+0xa4>)
 8000616:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800061a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_TIM2_Init+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_TIM2_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_TIM2_Init+0xa4>)
 800062a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800062e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_TIM2_Init+0xa4>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_TIM2_Init+0xa4>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800063c:	2303      	movs	r3, #3
 800063e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000654:	2301      	movs	r3, #1
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	480d      	ldr	r0, [pc, #52]	@ (800069c <MX_TIM2_Init+0xa4>)
 8000668:	f001 f972 	bl	8001950 <HAL_TIM_Encoder_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000672:	f7ff fdfc 	bl	800026e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <MX_TIM2_Init+0xa4>)
 8000684:	f001 feee 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800068e:	f7ff fdee 	bl	800026e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3730      	adds	r7, #48	@ 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000008c 	.word	0x2000008c

080006a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	@ 0x30
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2224      	movs	r2, #36	@ 0x24
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 ff87 	bl	80025c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_TIM3_Init+0xa0>)
 80006be:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <MX_TIM3_Init+0xa4>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_TIM3_Init+0xa0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_TIM3_Init+0xa0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <MX_TIM3_Init+0xa0>)
 80006d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_TIM3_Init+0xa0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_TIM3_Init+0xa0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	@ (8000740 <MX_TIM3_Init+0xa0>)
 800070e:	f001 f91f 	bl	8001950 <HAL_TIM_Encoder_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000718:	f7ff fda9 	bl	800026e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_TIM3_Init+0xa0>)
 800072a:	f001 fe9b 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000734:	f7ff fd9b 	bl	800026e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000d4 	.word	0x200000d4
 8000744:	40000400 	.word	0x40000400

08000748 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <MX_TIM4_Init+0xc0>)
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <MX_TIM4_Init+0xc4>)
 800076e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_TIM4_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <MX_TIM4_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5142;
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <MX_TIM4_Init+0xc0>)
 800077e:	f241 4216 	movw	r2, #5142	@ 0x1416
 8000782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <MX_TIM4_Init+0xc0>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <MX_TIM4_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000790:	481d      	ldr	r0, [pc, #116]	@ (8000808 <MX_TIM4_Init+0xc0>)
 8000792:	f001 f88e 	bl	80018b2 <HAL_TIM_PWM_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800079c:	f7ff fd67 	bl	800026e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4619      	mov	r1, r3
 80007ae:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_TIM4_Init+0xc0>)
 80007b0:	f001 fe58 	bl	8002464 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007ba:	f7ff fd58 	bl	800026e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007be:	2360      	movs	r3, #96	@ 0x60
 80007c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_TIM4_Init+0xc0>)
 80007d6:	f001 fa0b 	bl	8001bf0 <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007e0:	f7ff fd45 	bl	800026e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2204      	movs	r2, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4807      	ldr	r0, [pc, #28]	@ (8000808 <MX_TIM4_Init+0xc0>)
 80007ec:	f001 fa00 	bl	8001bf0 <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f7ff fd3a 	bl	800026e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007fa:	4803      	ldr	r0, [pc, #12]	@ (8000808 <MX_TIM4_Init+0xc0>)
 80007fc:	f000 f8bc 	bl	8000978 <HAL_TIM_MspPostInit>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000011c 	.word	0x2000011c
 800080c:	40000800 	.word	0x40000800

08000810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a09      	ldr	r2, [pc, #36]	@ (8000844 <HAL_TIM_Base_MspInit+0x34>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d10b      	bne.n	800083a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000828:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40012c00 	.word	0x40012c00
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800086a:	d12c      	bne.n	80008c6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800086c:	4b30      	ldr	r3, [pc, #192]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a2f      	ldr	r2, [pc, #188]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	61d3      	str	r3, [r2, #28]
 8000878:	4b2d      	ldr	r3, [pc, #180]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800089c:	2303      	movs	r3, #3
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4821      	ldr	r0, [pc, #132]	@ (8000934 <HAL_TIM_Encoder_MspInit+0xe8>)
 80008b0:	f000 fa4e 	bl	8000d50 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	201c      	movs	r0, #28
 80008ba:	f000 fa12 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008be:	201c      	movs	r0, #28
 80008c0:	f000 fa2b 	bl	8000d1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008c4:	e030      	b.n	8000928 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(tim_encoderHandle->Instance==TIM3)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <HAL_TIM_Encoder_MspInit+0xec>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d12b      	bne.n	8000928 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_TIM_Encoder_MspInit+0xe4>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000900:	23c0      	movs	r3, #192	@ 0xc0
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4619      	mov	r1, r3
 8000912:	4808      	ldr	r0, [pc, #32]	@ (8000934 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000914:	f000 fa1c 	bl	8000d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	201d      	movs	r0, #29
 800091e:	f000 f9e0 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000922:	201d      	movs	r0, #29
 8000924:	f000 f9f9 	bl	8000d1a <HAL_NVIC_EnableIRQ>
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800
 8000938:	40000400 	.word	0x40000400

0800093c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <HAL_TIM_PWM_MspInit+0x34>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d10b      	bne.n	8000966 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_TIM_PWM_MspInit+0x38>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_TIM_PWM_MspInit+0x38>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_TIM_PWM_MspInit+0x38>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40000800 	.word	0x40000800
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1f      	ldr	r2, [pc, #124]	@ (8000a10 <HAL_TIM_MspPostInit+0x98>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d119      	bne.n	80009cc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <HAL_TIM_MspPostInit+0x9c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a14 <HAL_TIM_MspPostInit+0x9c>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <HAL_TIM_MspPostInit+0x9c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <HAL_TIM_MspPostInit+0xa0>)
 80009c6:	f000 f9c3 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80009ca:	e01c      	b.n	8000a06 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <HAL_TIM_MspPostInit+0xa4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d117      	bne.n	8000a06 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_TIM_MspPostInit+0x9c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <HAL_TIM_MspPostInit+0x9c>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_TIM_MspPostInit+0x9c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23c0      	movs	r3, #192	@ 0xc0
 80009f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <HAL_TIM_MspPostInit+0xa8>)
 8000a02:	f000 f9a5 	bl	8000d50 <HAL_GPIO_Init>
}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40012c00 	.word	0x40012c00
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40000800 	.word	0x40000800
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fd36 	bl	8000494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	@ (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f001 fdc1 	bl	80025d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fba9 	bl	80001a8 <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	08002660 	.word	0x08002660
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	20000168 	.word	0x20000168

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f923 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fbf6 	bl	800027c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f93b 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f903 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000164 	.word	0x20000164

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000164 	.word	0x20000164

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4906      	ldr	r1, [pc, #24]	@ (8000bcc <__NVIC_EnableIRQ+0x34>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	@ (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	@ (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	@ 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	@ 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff90 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff2d 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff42 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff35 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b08b      	sub	sp, #44	@ 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e169      	b.n	8001038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d64:	2201      	movs	r2, #1
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8158 	bne.w	8001032 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a9a      	ldr	r2, [pc, #616]	@ (8000ff0 <HAL_GPIO_Init+0x2a0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d05e      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d8c:	4a98      	ldr	r2, [pc, #608]	@ (8000ff0 <HAL_GPIO_Init+0x2a0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d875      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d92:	4a98      	ldr	r2, [pc, #608]	@ (8000ff4 <HAL_GPIO_Init+0x2a4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d058      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d98:	4a96      	ldr	r2, [pc, #600]	@ (8000ff4 <HAL_GPIO_Init+0x2a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d86f      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d9e:	4a96      	ldr	r2, [pc, #600]	@ (8000ff8 <HAL_GPIO_Init+0x2a8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d052      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000da4:	4a94      	ldr	r2, [pc, #592]	@ (8000ff8 <HAL_GPIO_Init+0x2a8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d869      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000daa:	4a94      	ldr	r2, [pc, #592]	@ (8000ffc <HAL_GPIO_Init+0x2ac>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d04c      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000db0:	4a92      	ldr	r2, [pc, #584]	@ (8000ffc <HAL_GPIO_Init+0x2ac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d863      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000db6:	4a92      	ldr	r2, [pc, #584]	@ (8001000 <HAL_GPIO_Init+0x2b0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d046      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a90      	ldr	r2, [pc, #576]	@ (8001000 <HAL_GPIO_Init+0x2b0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d85d      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d82a      	bhi.n	8000e1c <HAL_GPIO_Init+0xcc>
 8000dc6:	2b12      	cmp	r3, #18
 8000dc8:	d859      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dca:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <HAL_GPIO_Init+0x80>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000e4b 	.word	0x08000e4b
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e37 	.word	0x08000e37
 8000ddc:	08000e79 	.word	0x08000e79
 8000de0:	08000e7f 	.word	0x08000e7f
 8000de4:	08000e7f 	.word	0x08000e7f
 8000de8:	08000e7f 	.word	0x08000e7f
 8000dec:	08000e7f 	.word	0x08000e7f
 8000df0:	08000e7f 	.word	0x08000e7f
 8000df4:	08000e7f 	.word	0x08000e7f
 8000df8:	08000e7f 	.word	0x08000e7f
 8000dfc:	08000e7f 	.word	0x08000e7f
 8000e00:	08000e7f 	.word	0x08000e7f
 8000e04:	08000e7f 	.word	0x08000e7f
 8000e08:	08000e7f 	.word	0x08000e7f
 8000e0c:	08000e7f 	.word	0x08000e7f
 8000e10:	08000e7f 	.word	0x08000e7f
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	4a79      	ldr	r2, [pc, #484]	@ (8001004 <HAL_GPIO_Init+0x2b4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e22:	e02c      	b.n	8000e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e029      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	3304      	adds	r3, #4
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e024      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e01f      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	330c      	adds	r3, #12
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e01a      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e52:	2304      	movs	r3, #4
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e013      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	611a      	str	r2, [r3, #16]
          break;
 8000e6a:	e009      	b.n	8000e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	615a      	str	r2, [r3, #20]
          break;
 8000e76:	e003      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          break;
 8000e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	@ 0xff
 8000e84:	d801      	bhi.n	8000e8a <HAL_GPIO_Init+0x13a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_Init+0x13e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	@ 0xff
 8000e94:	d802      	bhi.n	8000e9c <HAL_GPIO_Init+0x14c>
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	e002      	b.n	8000ea2 <HAL_GPIO_Init+0x152>
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80b1 	beq.w	8001032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b4a      	ldr	r3, [pc, #296]	@ (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee8:	4a48      	ldr	r2, [pc, #288]	@ (800100c <HAL_GPIO_Init+0x2bc>)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a40      	ldr	r2, [pc, #256]	@ (8001010 <HAL_GPIO_Init+0x2c0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d013      	beq.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a3f      	ldr	r2, [pc, #252]	@ (8001014 <HAL_GPIO_Init+0x2c4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1e8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001018 <HAL_GPIO_Init+0x2c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1e4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3d      	ldr	r2, [pc, #244]	@ (800101c <HAL_GPIO_Init+0x2cc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1e0>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4e:	492f      	ldr	r1, [pc, #188]	@ (800100c <HAL_GPIO_Init+0x2bc>)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f68:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	492c      	ldr	r1, [pc, #176]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f76:	4b2a      	ldr	r3, [pc, #168]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4928      	ldr	r1, [pc, #160]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	4922      	ldr	r1, [pc, #136]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60cb      	str	r3, [r1, #12]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	491e      	ldr	r1, [pc, #120]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb8:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4918      	ldr	r1, [pc, #96]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4914      	ldr	r1, [pc, #80]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d021      	beq.n	8001024 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	490e      	ldr	r1, [pc, #56]	@ (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e021      	b.n	8001032 <HAL_GPIO_Init+0x2e2>
 8000fee:	bf00      	nop
 8000ff0:	10320000 	.word	0x10320000
 8000ff4:	10310000 	.word	0x10310000
 8000ff8:	10220000 	.word	0x10220000
 8000ffc:	10210000 	.word	0x10210000
 8001000:	10120000 	.word	0x10120000
 8001004:	10110000 	.word	0x10110000
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	40010800 	.word	0x40010800
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40011000 	.word	0x40011000
 800101c:	40011400 	.word	0x40011400
 8001020:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	43db      	mvns	r3, r3
 800102c:	4909      	ldr	r1, [pc, #36]	@ (8001054 <HAL_GPIO_Init+0x304>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	3301      	adds	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	fa22 f303 	lsr.w	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f ae8e 	bne.w	8000d64 <HAL_GPIO_Init+0x14>
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	372c      	adds	r7, #44	@ 0x2c
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e272      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b92      	ldr	r3, [pc, #584]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001084:	4b8f      	ldr	r3, [pc, #572]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
 8001090:	4b8c      	ldr	r3, [pc, #560]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b89      	ldr	r3, [pc, #548]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x12c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e24c      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x76>
 80010c0:	4b80      	ldr	r3, [pc, #512]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a7f      	ldr	r2, [pc, #508]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010d6:	4b7b      	ldr	r3, [pc, #492]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7a      	ldr	r2, [pc, #488]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b78      	ldr	r3, [pc, #480]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a77      	ldr	r2, [pc, #476]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xbc>
 80010fa:	4b72      	ldr	r3, [pc, #456]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a71      	ldr	r2, [pc, #452]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6f      	ldr	r3, [pc, #444]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6e      	ldr	r2, [pc, #440]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 8001114:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6a      	ldr	r2, [pc, #424]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b68      	ldr	r3, [pc, #416]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a67      	ldr	r2, [pc, #412]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fcf4 	bl	8000b20 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fcf0 	bl	8000b20 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	@ 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e200      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe4>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fce0 	bl	8000b20 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fcdc 	bl	8000b20 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1ec      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b53      	ldr	r3, [pc, #332]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x10c>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800119e:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1c0      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3d      	ldr	r3, [pc, #244]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4939      	ldr	r1, [pc, #228]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc95 	bl	8000b20 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc91 	bl	8000b20 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a1      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4927      	ldr	r1, [pc, #156]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fc74 	bl	8000b20 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc70 	bl	8000b20 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e180      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03a      	beq.n	80012dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <HAL_RCC_OscConfig+0x274>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001274:	f7ff fc54 	bl	8000b20 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc50 	bl	8000b20 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e160      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fa9c 	bl	80017d8 <RCC_Delay>
 80012a0:	e01c      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_RCC_OscConfig+0x274>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc3a 	bl	8000b20 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ae:	e00f      	b.n	80012d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc36 	bl	8000b20 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d908      	bls.n	80012d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e146      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420000 	.word	0x42420000
 80012cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b92      	ldr	r3, [pc, #584]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e9      	bne.n	80012b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a6 	beq.w	8001436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b8b      	ldr	r3, [pc, #556]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10d      	bne.n	8001316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b88      	ldr	r3, [pc, #544]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a87      	ldr	r2, [pc, #540]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b85      	ldr	r3, [pc, #532]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b82      	ldr	r3, [pc, #520]	@ (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b7f      	ldr	r3, [pc, #508]	@ (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7e      	ldr	r2, [pc, #504]	@ (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7ff fbf7 	bl	8000b20 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7ff fbf3 	bl	8000b20 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	@ 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e103      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b75      	ldr	r3, [pc, #468]	@ (8001520 <HAL_RCC_OscConfig+0x4c8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x312>
 800135c:	4b6f      	ldr	r3, [pc, #444]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a6e      	ldr	r2, [pc, #440]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e02d      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x334>
 8001372:	4b6a      	ldr	r3, [pc, #424]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a69      	ldr	r2, [pc, #420]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b67      	ldr	r3, [pc, #412]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a66      	ldr	r2, [pc, #408]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	e01c      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x356>
 8001394:	4b61      	ldr	r3, [pc, #388]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a60      	ldr	r2, [pc, #384]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	4b5e      	ldr	r3, [pc, #376]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a5d      	ldr	r2, [pc, #372]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 80013ae:	4b5b      	ldr	r3, [pc, #364]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a5a      	ldr	r2, [pc, #360]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	4b58      	ldr	r3, [pc, #352]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a57      	ldr	r2, [pc, #348]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d015      	beq.n	80013fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fba7 	bl	8000b20 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fba3 	bl	8000b20 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0b1      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	4b4b      	ldr	r3, [pc, #300]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ee      	beq.n	80013d6 <HAL_RCC_OscConfig+0x37e>
 80013f8:	e014      	b.n	8001424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb91 	bl	8000b20 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb8d 	bl	8000b20 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e09b      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4b40      	ldr	r3, [pc, #256]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4b3c      	ldr	r3, [pc, #240]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a3b      	ldr	r2, [pc, #236]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8087 	beq.w	800154e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b36      	ldr	r3, [pc, #216]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d061      	beq.n	8001510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d146      	bne.n	80014e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <HAL_RCC_OscConfig+0x4cc>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fb61 	bl	8000b20 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fb5d 	bl	8000b20 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e06d      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4921      	ldr	r1, [pc, #132]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	430b      	orrs	r3, r1
 80014ae:	491b      	ldr	r1, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_RCC_OscConfig+0x4cc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb31 	bl	8000b20 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb2d 	bl	8000b20 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46a>
 80014e0:	e035      	b.n	800154e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <HAL_RCC_OscConfig+0x4cc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb1a 	bl	8000b20 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb16 	bl	8000b20 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x498>
 800150e:	e01e      	b.n	800154e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e019      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
 800151c:	40021000 	.word	0x40021000
 8001520:	40007000 	.word	0x40007000
 8001524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_RCC_OscConfig+0x500>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	429a      	cmp	r2, r3
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0d0      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d910      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b67      	ldr	r3, [pc, #412]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4965      	ldr	r1, [pc, #404]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b63      	ldr	r3, [pc, #396]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0b8      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b8:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a58      	ldr	r2, [pc, #352]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b50      	ldr	r3, [pc, #320]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	494d      	ldr	r1, [pc, #308]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d040      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d115      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e07f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e073      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06b      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b39      	ldr	r3, [pc, #228]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4936      	ldr	r1, [pc, #216]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fa68 	bl	8000b20 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fa64 	bl	8000b20 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e053      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d210      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4922      	ldr	r1, [pc, #136]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e032      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4916      	ldr	r1, [pc, #88]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490e      	ldr	r1, [pc, #56]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ea:	f000 f821 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490a      	ldr	r1, [pc, #40]	@ (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <HAL_RCC_ClockConfig+0x1cc>)
 8001704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_RCC_ClockConfig+0x1d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f9c6 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	08002634 	.word	0x08002634
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x30>
 800175a:	2b08      	cmp	r3, #8
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x36>
 800175e:	e027      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001762:	613b      	str	r3, [r7, #16]
      break;
 8001764:	e027      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d010      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	0c5b      	lsrs	r3, r3, #17
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001792:	fb03 f202 	mul.w	r2, r3, r2
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e004      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a0c      	ldr	r2, [pc, #48]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	613b      	str	r3, [r7, #16]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	693b      	ldr	r3, [r7, #16]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	007a1200 	.word	0x007a1200
 80017cc:	08002644 	.word	0x08002644
 80017d0:	08002654 	.word	0x08002654
 80017d4:	003d0900 	.word	0x003d0900

080017d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <RCC_Delay+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <RCC_Delay+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f4:	bf00      	nop
  }
  while (Delay --);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <RCC_Delay+0x1c>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e041      	b.n	80018aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe ffe8 	bl	8000810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3304      	adds	r3, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f000 fb56 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e041      	b.n	8001948 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d106      	bne.n	80018de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff f82f 	bl	800093c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f000 fb07 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e093      	b.n	8001a8c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d106      	bne.n	800197e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7fe ff67 	bl	800084c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2202      	movs	r2, #2
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001994:	f023 0307 	bic.w	r3, r3, #7
 8001998:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4610      	mov	r0, r2
 80019a6:	f000 faad 	bl	8001f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	4313      	orrs	r3, r2
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80019f0:	f023 030c 	bic.w	r3, r3, #12
 80019f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80019fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	011a      	lsls	r2, r3, #4
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	4313      	orrs	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001a2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001aa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001aac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ab4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001abc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d110      	bne.n	8001ae6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d001      	beq.n	8001ad4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e089      	b.n	8001be8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ae4:	e031      	b.n	8001b4a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d110      	bne.n	8001b0e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d001      	beq.n	8001afc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e075      	b.n	8001be8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b0c:	e01d      	b.n	8001b4a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d108      	bne.n	8001b26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d102      	bne.n	8001b26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b20:	7b3b      	ldrb	r3, [r7, #12]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d001      	beq.n	8001b2a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e05e      	b.n	8001be8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_TIM_Encoder_Start_IT+0xc4>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d010      	beq.n	8001b78 <HAL_TIM_Encoder_Start_IT+0xe4>
 8001b56:	e01f      	b.n	8001b98 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fc5b 	bl	800241c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0202 	orr.w	r2, r2, #2
 8001b74:	60da      	str	r2, [r3, #12]
      break;
 8001b76:	e02e      	b.n	8001bd6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fc4b 	bl	800241c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0204 	orr.w	r2, r2, #4
 8001b94:	60da      	str	r2, [r3, #12]
      break;
 8001b96:	e01e      	b.n	8001bd6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 fc3b 	bl	800241c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	2104      	movs	r1, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fc34 	bl	800241c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0202 	orr.w	r2, r2, #2
 8001bc2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0204 	orr.w	r2, r2, #4
 8001bd2:	60da      	str	r2, [r3, #12]
      break;
 8001bd4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0ae      	b.n	8001d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	f200 809f 	bhi.w	8001d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c59 	.word	0x08001c59
 8001c28:	08001d5d 	.word	0x08001d5d
 8001c2c:	08001d5d 	.word	0x08001d5d
 8001c30:	08001d5d 	.word	0x08001d5d
 8001c34:	08001c99 	.word	0x08001c99
 8001c38:	08001d5d 	.word	0x08001d5d
 8001c3c:	08001d5d 	.word	0x08001d5d
 8001c40:	08001d5d 	.word	0x08001d5d
 8001c44:	08001cdb 	.word	0x08001cdb
 8001c48:	08001d5d 	.word	0x08001d5d
 8001c4c:	08001d5d 	.word	0x08001d5d
 8001c50:	08001d5d 	.word	0x08001d5d
 8001c54:	08001d1b 	.word	0x08001d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f9be 	bl	8001fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0208 	orr.w	r2, r2, #8
 8001c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0204 	bic.w	r2, r2, #4
 8001c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6999      	ldr	r1, [r3, #24]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	619a      	str	r2, [r3, #24]
      break;
 8001c96:	e064      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fa04 	bl	80020ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6999      	ldr	r1, [r3, #24]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	619a      	str	r2, [r3, #24]
      break;
 8001cd8:	e043      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fa4d 	bl	8002180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0208 	orr.w	r2, r2, #8
 8001cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69da      	ldr	r2, [r3, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0204 	bic.w	r2, r2, #4
 8001d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69d9      	ldr	r1, [r3, #28]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
      break;
 8001d18:	e023      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fa97 	bl	8002254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69d9      	ldr	r1, [r3, #28]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_TIM_ConfigClockSource+0x1c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0b4      	b.n	8001efa <HAL_TIM_ConfigClockSource+0x186>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc8:	d03e      	beq.n	8001e48 <HAL_TIM_ConfigClockSource+0xd4>
 8001dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dce:	f200 8087 	bhi.w	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd6:	f000 8086 	beq.w	8001ee6 <HAL_TIM_ConfigClockSource+0x172>
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dde:	d87f      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de0:	2b70      	cmp	r3, #112	@ 0x70
 8001de2:	d01a      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0xa6>
 8001de4:	2b70      	cmp	r3, #112	@ 0x70
 8001de6:	d87b      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001de8:	2b60      	cmp	r3, #96	@ 0x60
 8001dea:	d050      	beq.n	8001e8e <HAL_TIM_ConfigClockSource+0x11a>
 8001dec:	2b60      	cmp	r3, #96	@ 0x60
 8001dee:	d877      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001df0:	2b50      	cmp	r3, #80	@ 0x50
 8001df2:	d03c      	beq.n	8001e6e <HAL_TIM_ConfigClockSource+0xfa>
 8001df4:	2b50      	cmp	r3, #80	@ 0x50
 8001df6:	d873      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001df8:	2b40      	cmp	r3, #64	@ 0x40
 8001dfa:	d058      	beq.n	8001eae <HAL_TIM_ConfigClockSource+0x13a>
 8001dfc:	2b40      	cmp	r3, #64	@ 0x40
 8001dfe:	d86f      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e00:	2b30      	cmp	r3, #48	@ 0x30
 8001e02:	d064      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0x15a>
 8001e04:	2b30      	cmp	r3, #48	@ 0x30
 8001e06:	d86b      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d060      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0x15a>
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d867      	bhi.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05c      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0x15a>
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d05a      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0x15a>
 8001e18:	e062      	b.n	8001ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e2a:	f000 fad8 	bl	80023de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	609a      	str	r2, [r3, #8]
      break;
 8001e46:	e04f      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e58:	f000 fac1 	bl	80023de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e6a:	609a      	str	r2, [r3, #8]
      break;
 8001e6c:	e03c      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f000 fa38 	bl	80022f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2150      	movs	r1, #80	@ 0x50
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fa8f 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001e8c:	e02c      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f000 fa56 	bl	800234c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2160      	movs	r1, #96	@ 0x60
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fa7f 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001eac:	e01c      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f000 fa18 	bl	80022f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2140      	movs	r1, #64	@ 0x40
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fa6f 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001ecc:	e00c      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f000 fa66 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8001ede:	e003      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee4:	e000      	b.n	8001ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd4 <TIM_Base_SetConfig+0xd0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x30>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x30>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd8 <TIM_Base_SetConfig+0xd4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x30>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001fdc <TIM_Base_SetConfig+0xd8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a22      	ldr	r2, [pc, #136]	@ (8001fd4 <TIM_Base_SetConfig+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_Base_SetConfig+0x62>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0x62>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <TIM_Base_SetConfig+0xd4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0x62>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <TIM_Base_SetConfig+0xd8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <TIM_Base_SetConfig+0xd0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f023 0201 	bic.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	611a      	str	r2, [r3, #16]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800

08001fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f023 0201 	bic.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a1c      	ldr	r2, [pc, #112]	@ (80020a8 <TIM_OC1_SetConfig+0xc8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10c      	bne.n	8002056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0308 	bic.w	r3, r3, #8
 8002042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <TIM_OC1_SetConfig+0xc8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d111      	bne.n	8002082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800206c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	621a      	str	r2, [r3, #32]
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00

080020ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f023 0210 	bic.w	r2, r3, #16
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0320 	bic.w	r3, r3, #32
 80020f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <TIM_OC2_SetConfig+0xd0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d10d      	bne.n	8002128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a14      	ldr	r2, [pc, #80]	@ (800217c <TIM_OC2_SetConfig+0xd0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d113      	bne.n	8002158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800213e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	621a      	str	r2, [r3, #32]
}
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40012c00 	.word	0x40012c00

08002180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <TIM_OC3_SetConfig+0xd0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10d      	bne.n	80021fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <TIM_OC3_SetConfig+0xd0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d113      	bne.n	800222a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	621a      	str	r2, [r3, #32]
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00

08002254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800229e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	031b      	lsls	r3, r3, #12
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	@ (80022ec <TIM_OC4_SetConfig+0x98>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d109      	bne.n	80022c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	621a      	str	r2, [r3, #32]
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00

080022f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0201 	bic.w	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800231a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f023 030a 	bic.w	r3, r3, #10
 800232c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	621a      	str	r2, [r3, #32]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0210 	bic.w	r2, r3, #16
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	031b      	lsls	r3, r3, #12
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002388:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	621a      	str	r2, [r3, #32]
}
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f043 0307 	orr.w	r3, r3, #7
 80023cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	021a      	lsls	r2, r3, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	609a      	str	r2, [r3, #8]
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	43db      	mvns	r3, r3
 800243e:	401a      	ands	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002478:	2302      	movs	r3, #2
 800247a:	e046      	b.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d009      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a10      	ldr	r2, [pc, #64]	@ (800251c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10c      	bne.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800

08002520 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e03d      	b.n	80025b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <memset>:
 80025c2:	4603      	mov	r3, r0
 80025c4:	4402      	add	r2, r0
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d100      	bne.n	80025cc <memset+0xa>
 80025ca:	4770      	bx	lr
 80025cc:	f803 1b01 	strb.w	r1, [r3], #1
 80025d0:	e7f9      	b.n	80025c6 <memset+0x4>
	...

080025d4 <__libc_init_array>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	2600      	movs	r6, #0
 80025d8:	4d0c      	ldr	r5, [pc, #48]	@ (800260c <__libc_init_array+0x38>)
 80025da:	4c0d      	ldr	r4, [pc, #52]	@ (8002610 <__libc_init_array+0x3c>)
 80025dc:	1b64      	subs	r4, r4, r5
 80025de:	10a4      	asrs	r4, r4, #2
 80025e0:	42a6      	cmp	r6, r4
 80025e2:	d109      	bne.n	80025f8 <__libc_init_array+0x24>
 80025e4:	f000 f81a 	bl	800261c <_init>
 80025e8:	2600      	movs	r6, #0
 80025ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002614 <__libc_init_array+0x40>)
 80025ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002618 <__libc_init_array+0x44>)
 80025ee:	1b64      	subs	r4, r4, r5
 80025f0:	10a4      	asrs	r4, r4, #2
 80025f2:	42a6      	cmp	r6, r4
 80025f4:	d105      	bne.n	8002602 <__libc_init_array+0x2e>
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fc:	4798      	blx	r3
 80025fe:	3601      	adds	r6, #1
 8002600:	e7ee      	b.n	80025e0 <__libc_init_array+0xc>
 8002602:	f855 3b04 	ldr.w	r3, [r5], #4
 8002606:	4798      	blx	r3
 8002608:	3601      	adds	r6, #1
 800260a:	e7f2      	b.n	80025f2 <__libc_init_array+0x1e>
 800260c:	08002658 	.word	0x08002658
 8002610:	08002658 	.word	0x08002658
 8002614:	08002658 	.word	0x08002658
 8002618:	0800265c 	.word	0x0800265c

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
